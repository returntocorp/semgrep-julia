(* Generated by ocaml-tree-sitter. *)
(*
   julia grammar

   entrypoint: source_file
*)

open! Sexplib.Conv
open Tree_sitter_run

type float_literal = Token.t
[@@deriving sexp_of]

type pat_684220d = Token.t (* pattern "[^'\\\\]" *)
[@@deriving sexp_of]

type dotty_operator = Token.t
[@@deriving sexp_of]

type pat_a25c544 = Token.t (* pattern [0-9]|([0-9][0-9_]*[0-9]) *)
[@@deriving sexp_of]

type command_start = Token.t
[@@deriving sexp_of]

type tok_0b_pat_1c3450e = Token.t
[@@deriving sexp_of]

type immediate_paren = Token.t
[@@deriving sexp_of]

type escape_sequence = Token.t
[@@deriving sexp_of]

type immediate_string_start = Token.t
[@@deriving sexp_of]

type imm_tok_lbrack = Token.t (* "[" *)
[@@deriving sexp_of]

type rational_operator = Token.t
[@@deriving sexp_of]

type command_end = Token.t
[@@deriving sexp_of]

type comparison_operator = Token.t
[@@deriving sexp_of]

type identifier =
  Token.t (* pattern "[_\\p{L}\\p{Nl}\226\136\135][^\"'`\\s\\.\\-\\[\\],;:(){}&$=+==*=/=//=\\\\=^=\195\183=%=<<=>>=>>>=||
[@@deriving sexp_of]

type plus_operator = Token.t
[@@deriving sexp_of]

type string_content_no_interp = Token.t
[@@deriving sexp_of]

type assign_operator = Token.t
[@@deriving sexp_of]

type unary_operator = Token.t
[@@deriving sexp_of]

type immediate_command_start = Token.t
[@@deriving sexp_of]

type tok_0x_pat_50ed65e = Token.t
[@@deriving sexp_of]

type times_operator = Token.t
[@@deriving sexp_of]

type arrow_operator = Token.t
[@@deriving sexp_of]

type power_operator = Token.t
[@@deriving sexp_of]

type string_end = Token.t
[@@deriving sexp_of]

type string_start = Token.t
[@@deriving sexp_of]

type tok_0o_pat_c83427c = Token.t
[@@deriving sexp_of]

type string_content = Token.t
[@@deriving sexp_of]

type bitshift_operator = Token.t
[@@deriving sexp_of]

type terminator = [ `LF of Token.t (* "\n" *) | `SEMI of Token.t (* ";" *) ]
[@@deriving sexp_of]

type imm_tok_colon = Token.t (* ":" *)
[@@deriving sexp_of]

type anon_choice_id_f1f5a37 = [
    `Id of identifier (*tok*)
  | `Scoped_id of scoped_identifier
]

and scoped_identifier = (
    anon_choice_id_f1f5a37 option
  * Token.t (* "." *)
  * identifier (*tok*)
)
[@@deriving sexp_of]

type anon_choice_str_content_no_interp_24ac4f9 = [
    `Str_content_no_interp of string_content_no_interp (*tok*)
  | `Esc_seq of escape_sequence (*tok*)
]
[@@deriving sexp_of]

type integer_literal = [
    `Tok_0b_pat_1c3450e of tok_0b_pat_1c3450e
  | `Tok_0o_pat_c83427c of tok_0o_pat_c83427c
  | `Tok_0x_pat_50ed65e of tok_0x_pat_50ed65e
  | `Pat_a25c544 of pat_a25c544
]
[@@deriving sexp_of]

type operator = [
    `Comp_op of comparison_operator (*tok*)
  | `Dotty_op of dotty_operator (*tok*)
  | `Plus_op of plus_operator (*tok*)
  | `Times_op of times_operator (*tok*)
  | `Rati_op of rational_operator (*tok*)
  | `Bits_op of bitshift_operator (*tok*)
  | `Power_op of power_operator (*tok*)
  | `Un_op of unary_operator (*tok*)
]
[@@deriving sexp_of]

type macro_identifier = (
    Token.t (* "@" *)
  * [
        `Id of identifier (*tok*)
      | `Op of operator
      | `DOT of Token.t (* "." *)
    ]
)
[@@deriving sexp_of]

type anon_choice_id_8e9135e = [
    `Id of identifier (*tok*)
  | `Macro_id of macro_identifier
]
[@@deriving sexp_of]

type anon_choice_id_1ca53ff = [
    `Id of identifier (*tok*)
  | `Scoped_id of scoped_identifier
  | `Sele_import of (
        anon_choice_id_f1f5a37
      * imm_tok_colon (*tok*)
      * anon_choice_id_8e9135e
      * (Token.t (* "," *) * anon_choice_id_8e9135e) list (* zero or more *)
    )
]
[@@deriving sexp_of]

type anon_choice_arg_list_38b50f0 = [
    `Arg_list of argument_list
  | `Gene_exp of generator_expression
]

and anon_choice_exp_44a61a9 = [
    `Exp of expression
  | `Assign_exp of assignment_expression
]

and anon_choice_exp_91c2553 = [
    `Exp of expression
  | `Named_field of named_field
]

and anon_choice_exp_b71eb95 = [
    `Exp of expression
  | `Assign_exp of assignment_expression
  | `Bare_tuple_exp of bare_tuple_expression
]

and anon_choice_exp_d189641 = [
    `Exp of expression
  | `Bare_tuple_exp of bare_tuple_expression
]

and anon_choice_id_0836987 = [
    `Id of identifier (*tok*)
  | `Spread_param of (identifier (*tok*) * Token.t (* "..." *))
  | `Opt_param of (
        [ `Id of identifier (*tok*) | `Typed_param of typed_parameter ]
      * Token.t (* "=" *)
      * expression
    )
  | `Typed_param of typed_parameter
]

and anon_choice_id_b4fe4b3 = [
    `Id of identifier (*tok*)
  | `Para_id of parameterized_identifier
]

and anon_choice_id_e9e133c = [
    `Id of identifier (*tok*)
  | `Cons_param of (identifier (*tok*) * Token.t (* "<:" *) * expression)
]

and anon_choice_str_content_838a78d = [
    `Str_content of string_content (*tok*)
  | `Str_interp of (
        Token.t (* "$" *)
      * [
            `Id of identifier (*tok*)
          | `LPAR_exp_RPAR of (
                Token.t (* "(" *) * expression * Token.t (* ")" *)
            )
        ]
    )
  | `Esc_seq of escape_sequence (*tok*)
]

and anon_exp_rep_COMMA_exp_0bb260c = (
    expression
  * (Token.t (* "," *) * expression) list (* zero or more *)
)

and argument_list = (
    Token.t (* "(" *)
  * (
        anon_choice_exp_91c2553
      * (Token.t (* "," *) * anon_choice_exp_91c2553) list (* zero or more *)
    )
      option
  * (
        Token.t (* ";" *)
      * named_field
      * (Token.t (* "," *) * named_field) list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * Token.t (* ")" *)
)

and assignment_expression = (
    anon_choice_exp_d189641
  * [ `Assign_op of assign_operator (*tok*) | `EQ of Token.t (* "=" *) ]
  * anon_choice_exp_b71eb95
)

and bare_tuple_expression = (
    expression
  * (Token.t (* "," *) * expression) list (* one or more *)
)

and binary_expression = [
    `Exp_power_op_exp of (expression * power_operator (*tok*) * expression)
  | `Exp_rati_op_exp of (expression * rational_operator (*tok*) * expression)
  | `Exp_bits_op_exp of (expression * bitshift_operator (*tok*) * expression)
  | `Exp_times_op_exp of (expression * times_operator (*tok*) * expression)
  | `Exp_choice_PLUS_exp of (
        expression
      * [ `PLUS of Token.t (* "+" *) | `Plus_op of plus_operator (*tok*) ]
      * expression
    )
  | `Exp_dotty_op_exp of (expression * dotty_operator (*tok*) * expression)
  | `Exp_arrow_op_exp of (expression * arrow_operator (*tok*) * expression)
  | `Exp_LTBAR_exp of (expression * Token.t (* "<|" *) * expression)
  | `Exp_BARGT_exp of (expression * Token.t (* "|>" *) * expression)
  | `Exp_choice_in_exp of (
        expression
      * [
            `In of Token.t (* "in" *)
          | `Isa of Token.t (* "isa" *)
          | `Comp_op of comparison_operator (*tok*)
        ]
      * expression
    )
  | `Exp_BARBAR_exp of (expression * Token.t (* "||" *) * expression)
  | `Exp_AMPAMP_exp of (expression * Token.t (* "&&" *) * expression)
]

and catch_clause = (
    Token.t (* "catch" *)
  * identifier (*tok*) option
  * terminator option
  * source_file
)

and comprehension_clause = (
    for_clause
  * [ `For_clause of for_clause | `If_clause of if_clause ]
      list (* zero or more *)
)

and definition = [
    `Abst_defi of (
        Token.t (* "abstract" *)
      * Token.t (* "type" *)
      * identifier (*tok*)
      * type_parameter_list option
      * subtype_clause option
      * Token.t (* "end" *)
    )
  | `Prim_defi of (
        Token.t (* "primitive" *)
      * Token.t (* "type" *)
      * identifier (*tok*)
      * type_parameter_list option
      * subtype_clause option
      * pat_a25c544
      * Token.t (* "end" *)
    )
  | `Struct_defi of (
        Token.t (* "mutable" *) option
      * Token.t (* "struct" *)
      * identifier (*tok*)
      * type_parameter_list option
      * subtype_clause option
      * source_file
      * Token.t (* "end" *)
    )
  | `Module_defi of (
        Token.t (* "module" *) * identifier (*tok*) * source_file
      * Token.t (* "end" *)
    )
  | `Func_defi of (
        Token.t (* "function" *)
      * identifier (*tok*)
      * type_parameter_list option
      * parameter_list
      * source_file
      * Token.t (* "end" *)
    )
  | `Macro_defi of (
        Token.t (* "macro" *)
      * [ `Id of identifier (*tok*) | `Op of operator ]
      * parameter_list
      * source_file
      * Token.t (* "end" *)
    )
]

and do_clause = (Token.t (* "do" *) * expression_list * Token.t (* "end" *))

and else_clause = (Token.t (* "else" *) * source_file)

and elseif_clause = (
    Token.t (* "elseif" *)
  * expression
  * terminator option
  * source_file
)

and expression = [
    `Choice_if_stmt of statement
  | `Choice_abst_defi of definition
  | `Typed_exp of (
        expression
      * [
            `COLONCOLON of Token.t (* "::" *)
          | `LTCOLON of Token.t (* "<:" *)
        ]
      * anon_choice_id_b4fe4b3
    )
  | `Comp_exp of (
        Token.t (* "begin" *) * expression_list * Token.t (* "end" *)
    )
  | `Pair_exp of (expression * Token.t (* "=>" *) * expression)
  | `COLON of Token.t (* ":" *)
  | `Macro_exp of (
        macro_identifier
      * [
            `Imme_paren_arg_list of (immediate_paren (*tok*) * argument_list)
          | `Macro_arg_list of macro_argument_list
        ]
          option
    )
  | `Un_exp of unary_expression
  | `Bin_exp of binary_expression
  | `Tern_exp of (
        expression * Token.t (* "?" *) * expression * Token.t (* ":" *)
      * expression
    )
  | `Gene_exp of generator_expression
  | `Func_exp of function_expression
  | `Coef_exp of (
        [ `Pat_a25c544 of pat_a25c544 | `Float_lit of float_literal (*tok*) ]
      * [
            `Paren_exp of parenthesized_expression
          | `Id of identifier (*tok*)
        ]
    )
  | `Spread_exp of spread_expression
  | `Range_exp of (expression * Token.t (* ":" *) * expression)
  | `Quote_exp of (Token.t (* ":" *) * expression)
  | `Interp_exp of (Token.t (* "$" *) * expression)
  | `Prim_exp of primary_expression
  | `Lit of literal
  | `Op of operator
]

and expression_list = (
    anon_choice_exp_b71eb95
  * (terminator * anon_choice_exp_b71eb95) list (* zero or more *)
  * terminator option
)

and field_expression = (
    primary_expression * Token.t (* "." *) * identifier (*tok*)
)

and finally_clause = (
    Token.t (* "finally" *)
  * terminator option
  * source_file
)

and for_binding = (
    [ `Id of identifier (*tok*) | `Tuple_exp of tuple_expression ]
  * [
        `In of Token.t (* "in" *)
      | `EQ of Token.t (* "=" *)
      | `UNKUNKUNK of Token.t (* "\226\136\136" *)
    ]
  * expression
)

and for_clause = (
    Token.t (* "for" *)
  * for_binding
  * (Token.t (* "," *) * for_binding) list (* zero or more *)
)

and function_expression = [
    `Func_param_list_choice_exp_end of (
        Token.t (* "function" *) * parameter_list * anon_choice_exp_44a61a9
      * Token.t (* "end" *)
    )
  | `Choice_id_DASHGT_choice_exp of (
        [ `Id of identifier (*tok*) | `Param_list of parameter_list ]
      * Token.t (* "->" *)
      * anon_choice_exp_44a61a9
    )
]

and generator_expression = (
    Token.t (* "(" *) * expression * comprehension_clause * Token.t (* ")" *)
)

and if_clause = (Token.t (* "if" *) * expression)

and keyword_parameters = (
    Token.t (* ";" *)
  * anon_choice_id_0836987
  * (Token.t (* "," *) * anon_choice_id_0836987) list (* zero or more *)
)

and literal = [
    `Int_lit of integer_literal
  | `Float_lit of float_literal (*tok*)
  | `Char_lit of (
        Token.t (* "'" *)
      * [ `Esc_seq of escape_sequence (*tok*) | `Pat_684220d of pat_684220d ]
      * Token.t (* "'" *)
    )
  | `Str_lit of (
        string_start (*tok*)
      * anon_choice_str_content_838a78d list (* zero or more *)
      * string_end (*tok*)
    )
  | `Cmd_lit of (
        command_start (*tok*)
      * anon_choice_str_content_838a78d list (* zero or more *)
      * command_end (*tok*)
    )
  | `Pref_str_lit of (
        identifier (*tok*)
      * immediate_string_start (*tok*)
      * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
      * string_end (*tok*)
    )
  | `Pref_cmd_lit of (
        identifier (*tok*)
      * immediate_command_start (*tok*)
      * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
      * command_end (*tok*)
    )
]

and macro_argument_list = expression list (* one or more *)

and matrix_row = expression list (* one or more *)

and named_field = (identifier (*tok*) * Token.t (* "=" *) * expression)

and parameter_list = (
    Token.t (* "(" *)
  * (
        anon_choice_id_0836987
      * (Token.t (* "," *) * anon_choice_id_0836987) list (* zero or more *)
    )
      option
  * keyword_parameters option
  * Token.t (* ")" *)
)

and parameterized_identifier = (
    [ `Id of identifier (*tok*) | `Field_exp of field_expression ]
  * type_argument_list
)

and parenthesized_expression = (
    Token.t (* "(" *)
  * [ `Exp_list of expression_list | `Spread_exp of spread_expression ]
  * Token.t (* ")" *)
)

and primary_expression = [
    `Id of identifier (*tok*)
  | `Array_exp of (
        Token.t (* "[" *)
      * anon_exp_rep_COMMA_exp_0bb260c option
      * Token.t (* "," *) option
      * Token.t (* "]" *)
    )
  | `Array_comp_exp of (
        Token.t (* "[" *) * expression * comprehension_clause
      * Token.t (* "]" *)
    )
  | `Matrix_exp of (
        Token.t (* "[" *)
      * (
            matrix_row
          * (Token.t (* ";" *) * matrix_row) list (* zero or more *)
        )
          option
      * Token.t (* ";" *) option
      * Token.t (* "]" *)
    )
  | `Call_exp of (
        [ `Prim_exp of primary_expression | `Op of operator ]
      * immediate_paren (*tok*)
      * anon_choice_arg_list_38b50f0
      * do_clause option
    )
  | `Field_exp of field_expression
  | `Paren_exp of parenthesized_expression
  | `Subs_exp of (
        [ `Prim_exp of primary_expression | `Lit of literal ]
      * imm_tok_lbrack (*tok*)
      * anon_exp_rep_COMMA_exp_0bb260c option
      * Token.t (* "," *) option
      * Token.t (* "]" *)
    )
  | `Para_id of parameterized_identifier
  | `Tuple_exp of tuple_expression
  | `Broa_call_exp of (
        primary_expression
      * Token.t (* "." *)
      * immediate_paren (*tok*)
      * anon_choice_arg_list_38b50f0
      * do_clause option
    )
]

and source_file = expression_list option

and spread_expression = (expression * Token.t (* "..." *))

and statement = [
    `If_stmt of (
        Token.t (* "if" *)
      * expression
      * terminator option
      * source_file
      * elseif_clause list (* zero or more *)
      * else_clause option
      * Token.t (* "end" *)
    )
  | `Try_stmt of (
        Token.t (* "try" *)
      * source_file
      * catch_clause option
      * finally_clause option
      * Token.t (* "end" *)
    )
  | `For_stmt of (
        Token.t (* "for" *)
      * for_binding
      * (Token.t (* "," *) * for_binding) list (* zero or more *)
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
  | `While_stmt of (
        Token.t (* "while" *)
      * expression
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
  | `Let_stmt of (
        Token.t (* "let" *)
      * variable_declaration
      * (Token.t (* "," *) * variable_declaration) list (* zero or more *)
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
  | `Const_stmt of (
        Token.t (* "const" *)
      * variable_declaration
      * (Token.t (* "," *) * variable_declaration) list (* zero or more *)
    )
  | `Quote_stmt of (
        Token.t (* "quote" *) * source_file * Token.t (* "end" *)
    )
  | `Brk_stmt of Token.t (* "break" *)
  | `Cont_stmt of Token.t (* "continue" *)
  | `Ret_stmt of (Token.t (* "return" *) * anon_choice_exp_d189641 option)
  | `Import_stmt of (
        [
            `Using of Token.t (* "using" *)
          | `Import of Token.t (* "import" *)
        ]
      * anon_choice_id_1ca53ff
      * (Token.t (* "," *) * anon_choice_id_1ca53ff) list (* zero or more *)
    )
  | `Export_stmt of (
        Token.t (* "export" *)
      * identifier (*tok*)
      * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
    )
]

and subtype_clause = (Token.t (* "<:" *) * expression)

and tuple_expression = (
    Token.t (* "(" *)
  * [
        `Opt_COMMA of Token.t (* "," *) option
      | `Choice_exp_COMMA of (anon_choice_exp_91c2553 * Token.t (* "," *))
      | `Choice_exp_rep1_COMMA_choice_exp_opt_COMMA of (
            anon_choice_exp_91c2553
          * (Token.t (* "," *) * anon_choice_exp_91c2553)
              list (* one or more *)
          * Token.t (* "," *) option
        )
    ]
  * Token.t (* ")" *)
)

and type_argument_list = (
    Token.t (* "{" *)
  * [ `Exp of expression ]
  * (Token.t (* "," *) * [ `Exp of expression ]) list (* zero or more *)
  * Token.t (* "}" *)
)

and type_parameter_list = (
    Token.t (* "{" *)
  * anon_choice_id_e9e133c
  * (Token.t (* "," *) * anon_choice_id_e9e133c) list (* zero or more *)
  * Token.t (* "}" *)
)

and typed_parameter = (
    identifier (*tok*) * Token.t (* "::" *) * anon_choice_id_b4fe4b3
)

and unary_expression = [
    `Un_op_exp of (unary_operator (*tok*) * expression)
  | `Exp_SQUOT of (expression * Token.t (* "'" *))
]

and variable_declaration = (
    identifier (*tok*)
  * (Token.t (* "=" *) * expression) option
)
[@@deriving sexp_of]

type continue_statement (* inlined *) = Token.t (* "continue" *)
[@@deriving sexp_of]

type block_comment (* inlined *) = Token.t
[@@deriving sexp_of]

type break_statement (* inlined *) = Token.t (* "break" *)
[@@deriving sexp_of]

type line_comment (* inlined *) = Token.t
[@@deriving sexp_of]

type character_literal (* inlined *) = (
    Token.t (* "'" *)
  * [ `Esc_seq of escape_sequence (*tok*) | `Pat_684220d of pat_684220d ]
  * Token.t (* "'" *)
)
[@@deriving sexp_of]

type export_statement (* inlined *) = (
    Token.t (* "export" *)
  * identifier (*tok*)
  * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
)
[@@deriving sexp_of]

type spread_parameter (* inlined *) = (
    identifier (*tok*) * Token.t (* "..." *)
)
[@@deriving sexp_of]

type prefixed_command_literal (* inlined *) = (
    identifier (*tok*)
  * immediate_command_start (*tok*)
  * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
  * command_end (*tok*)
)
[@@deriving sexp_of]

type prefixed_string_literal (* inlined *) = (
    identifier (*tok*)
  * immediate_string_start (*tok*)
  * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
  * string_end (*tok*)
)
[@@deriving sexp_of]

type selected_import (* inlined *) = (
    anon_choice_id_f1f5a37
  * imm_tok_colon (*tok*)
  * anon_choice_id_8e9135e
  * (Token.t (* "," *) * anon_choice_id_8e9135e) list (* zero or more *)
)
[@@deriving sexp_of]

type import_statement (* inlined *) = (
    [ `Using of Token.t (* "using" *) | `Import of Token.t (* "import" *) ]
  * anon_choice_id_1ca53ff
  * (Token.t (* "," *) * anon_choice_id_1ca53ff) list (* zero or more *)
)
[@@deriving sexp_of]

type abstract_definition (* inlined *) = (
    Token.t (* "abstract" *)
  * Token.t (* "type" *)
  * identifier (*tok*)
  * type_parameter_list option
  * subtype_clause option
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type array_comprehension_expression (* inlined *) = (
    Token.t (* "[" *) * expression * comprehension_clause * Token.t (* "]" *)
)
[@@deriving sexp_of]

type array_expression (* inlined *) = (
    Token.t (* "[" *)
  * anon_exp_rep_COMMA_exp_0bb260c option
  * Token.t (* "," *) option
  * Token.t (* "]" *)
)
[@@deriving sexp_of]

type broadcast_call_expression (* inlined *) = (
    primary_expression
  * Token.t (* "." *)
  * immediate_paren (*tok*)
  * anon_choice_arg_list_38b50f0
  * do_clause option
)
[@@deriving sexp_of]

type call_expression (* inlined *) = (
    [ `Prim_exp of primary_expression | `Op of operator ]
  * immediate_paren (*tok*)
  * anon_choice_arg_list_38b50f0
  * do_clause option
)
[@@deriving sexp_of]

type coefficient_expression (* inlined *) = (
    [ `Pat_a25c544 of pat_a25c544 | `Float_lit of float_literal (*tok*) ]
  * [ `Paren_exp of parenthesized_expression | `Id of identifier (*tok*) ]
)
[@@deriving sexp_of]

type command_literal (* inlined *) = (
    command_start (*tok*)
  * anon_choice_str_content_838a78d list (* zero or more *)
  * command_end (*tok*)
)
[@@deriving sexp_of]

type compound_expression (* inlined *) = (
    Token.t (* "begin" *) * expression_list * Token.t (* "end" *)
)
[@@deriving sexp_of]

type const_statement (* inlined *) = (
    Token.t (* "const" *)
  * variable_declaration
  * (Token.t (* "," *) * variable_declaration) list (* zero or more *)
)
[@@deriving sexp_of]

type constrained_parameter (* inlined *) = (
    identifier (*tok*) * Token.t (* "<:" *) * expression
)
[@@deriving sexp_of]

type for_statement (* inlined *) = (
    Token.t (* "for" *)
  * for_binding
  * (Token.t (* "," *) * for_binding) list (* zero or more *)
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type function_definition (* inlined *) = (
    Token.t (* "function" *)
  * identifier (*tok*)
  * type_parameter_list option
  * parameter_list
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type if_statement (* inlined *) = (
    Token.t (* "if" *)
  * expression
  * terminator option
  * source_file
  * elseif_clause list (* zero or more *)
  * else_clause option
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type interpolation_expression (* inlined *) = (
    Token.t (* "$" *) * expression
)
[@@deriving sexp_of]

type let_statement (* inlined *) = (
    Token.t (* "let" *)
  * variable_declaration
  * (Token.t (* "," *) * variable_declaration) list (* zero or more *)
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type macro_definition (* inlined *) = (
    Token.t (* "macro" *)
  * [ `Id of identifier (*tok*) | `Op of operator ]
  * parameter_list
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type macro_expression (* inlined *) = (
    macro_identifier
  * [
        `Imme_paren_arg_list of (immediate_paren (*tok*) * argument_list)
      | `Macro_arg_list of macro_argument_list
    ]
      option
)
[@@deriving sexp_of]

type matrix_expression (* inlined *) = (
    Token.t (* "[" *)
  * (matrix_row * (Token.t (* ";" *) * matrix_row) list (* zero or more *))
      option
  * Token.t (* ";" *) option
  * Token.t (* "]" *)
)
[@@deriving sexp_of]

type module_definition (* inlined *) = (
    Token.t (* "module" *) * identifier (*tok*) * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type optional_parameter (* inlined *) = (
    [ `Id of identifier (*tok*) | `Typed_param of typed_parameter ]
  * Token.t (* "=" *)
  * expression
)
[@@deriving sexp_of]

type pair_expression (* inlined *) = (
    expression * Token.t (* "=>" *) * expression
)
[@@deriving sexp_of]

type primitive_definition (* inlined *) = (
    Token.t (* "primitive" *)
  * Token.t (* "type" *)
  * identifier (*tok*)
  * type_parameter_list option
  * subtype_clause option
  * pat_a25c544
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type quote_expression (* inlined *) = (Token.t (* ":" *) * expression)
[@@deriving sexp_of]

type quote_statement (* inlined *) = (
    Token.t (* "quote" *) * source_file * Token.t (* "end" *)
)
[@@deriving sexp_of]

type range_expression (* inlined *) = (
    expression * Token.t (* ":" *) * expression
)
[@@deriving sexp_of]

type return_statement (* inlined *) = (
    Token.t (* "return" *)
  * anon_choice_exp_d189641 option
)
[@@deriving sexp_of]

type string_interpolation (* inlined *) = (
    Token.t (* "$" *)
  * [
        `Id of identifier (*tok*)
      | `LPAR_exp_RPAR of (
            Token.t (* "(" *) * expression * Token.t (* ")" *)
        )
    ]
)
[@@deriving sexp_of]

type string_literal (* inlined *) = (
    string_start (*tok*)
  * anon_choice_str_content_838a78d list (* zero or more *)
  * string_end (*tok*)
)
[@@deriving sexp_of]

type struct_definition (* inlined *) = (
    Token.t (* "mutable" *) option
  * Token.t (* "struct" *)
  * identifier (*tok*)
  * type_parameter_list option
  * subtype_clause option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type subscript_expression (* inlined *) = (
    [ `Prim_exp of primary_expression | `Lit of literal ]
  * imm_tok_lbrack (*tok*)
  * anon_exp_rep_COMMA_exp_0bb260c option
  * Token.t (* "," *) option
  * Token.t (* "]" *)
)
[@@deriving sexp_of]

type ternary_expression (* inlined *) = (
    expression * Token.t (* "?" *) * expression * Token.t (* ":" *)
  * expression
)
[@@deriving sexp_of]

type try_statement (* inlined *) = (
    Token.t (* "try" *)
  * source_file
  * catch_clause option
  * finally_clause option
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type typed_expression (* inlined *) = (
    expression
  * [ `COLONCOLON of Token.t (* "::" *) | `LTCOLON of Token.t (* "<:" *) ]
  * anon_choice_id_b4fe4b3
)
[@@deriving sexp_of]

type while_statement (* inlined *) = (
    Token.t (* "while" *)
  * expression
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

let dump_tree root =
  sexp_of_source_file root
  |> Print_sexp.to_stdout
